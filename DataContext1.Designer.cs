//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 28.09.2021 15:17:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace FsDbContext
{

    [DatabaseAttribute(Name = "fs_db")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class FsDbDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FsDbDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertFilm(Film instance);
        partial void UpdateFilm(Film instance);
        partial void DeleteFilm(Film instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertUserRole(UserRole instance);
        partial void UpdateUserRole(UserRole instance);
        partial void DeleteUserRole(UserRole instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public FsDbDataContext() :
        base(@"User Id=root;Password=1234;Host=localhost;Database=fs_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public FsDbDataContext(MappingSource mappingSource) :
        base(@"User Id=root;Password=1234;Host=localhost;Database=fs_db;Persist Security Info=True", mappingSource)
        {
            OnCreated();
        }

        public FsDbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FsDbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FsDbDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FsDbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Film> Films
        {
            get
            {
                return this.GetTable<Film>();
            }
        }

        public Devart.Data.Linq.Table<HibernateSequence> HibernateSequences
        {
            get
            {
                return this.GetTable<HibernateSequence>();
            }
        }

        public Devart.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public Devart.Data.Linq.Table<UserRole> UserRoles
        {
            get
            {
                return this.GetTable<UserRole>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace FsDbContext
{

    /// <summary>
    /// There are no comments for FsDbContext.Film in the schema.
    /// </summary>
    [Table(Name = @"fs_db.films")]
    public partial class Film : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int? _CriticRate;

        private string _FilmDescription;

        private string _FilmGenre;

        private int _FilmId;

        private string _FilmName;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCriticRateChanging(int? value);
        partial void OnCriticRateChanged();
        partial void OnFilmDescriptionChanging(string value);
        partial void OnFilmDescriptionChanged();
        partial void OnFilmGenreChanging(string value);
        partial void OnFilmGenreChanged();
        partial void OnFilmIdChanging(int value);
        partial void OnFilmIdChanged();
        partial void OnFilmNameChanging(string value);
        partial void OnFilmNameChanged();
        #endregion

        public Film()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CriticRate in the schema.
        /// </summary>
        [Column(Name = @"critic_rate", Storage = "_CriticRate", DbType = "INT NULL", UpdateCheck = UpdateCheck.Never)]
        public int? CriticRate
        {
            get
            {
                return this._CriticRate;
            }
            set
            {
                if (this._CriticRate != value)
                {
                    this.OnCriticRateChanging(value);
                    this.SendPropertyChanging("CriticRate");
                    this._CriticRate = value;
                    this.SendPropertyChanged("CriticRate");
                    this.OnCriticRateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmDescription in the schema.
        /// </summary>
        [Column(Name = @"film_description", Storage = "_FilmDescription", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FilmDescription
        {
            get
            {
                return this._FilmDescription;
            }
            set
            {
                if (this._FilmDescription != value)
                {
                    this.OnFilmDescriptionChanging(value);
                    this.SendPropertyChanging("FilmDescription");
                    this._FilmDescription = value;
                    this.SendPropertyChanged("FilmDescription");
                    this.OnFilmDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmGenre in the schema.
        /// </summary>
        [Column(Name = @"film_genre", Storage = "_FilmGenre", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FilmGenre
        {
            get
            {
                return this._FilmGenre;
            }
            set
            {
                if (this._FilmGenre != value)
                {
                    this.OnFilmGenreChanging(value);
                    this.SendPropertyChanging("FilmGenre");
                    this._FilmGenre = value;
                    this.SendPropertyChanged("FilmGenre");
                    this.OnFilmGenreChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmId in the schema.
        /// </summary>
        [Column(Name = @"film_id", Storage = "_FilmId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int FilmId
        {
            get
            {
                return this._FilmId;
            }
            set
            {
                if (this._FilmId != value)
                {
                    this.OnFilmIdChanging(value);
                    this.SendPropertyChanging("FilmId");
                    this._FilmId = value;
                    this.SendPropertyChanged("FilmId");
                    this.OnFilmIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FilmName in the schema.
        /// </summary>
        [Column(Name = @"film_name", Storage = "_FilmName", CanBeNull = false, DbType = "VARCHAR(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FilmName
        {
            get
            {
                return this._FilmName;
            }
            set
            {
                if (this._FilmName != value)
                {
                    this.OnFilmNameChanging(value);
                    this.SendPropertyChanging("FilmName");
                    this._FilmName = value;
                    this.SendPropertyChanged("FilmName");
                    this.OnFilmNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FsDbContext.HibernateSequence in the schema.
    /// </summary>
    [Table(Name = @"fs_db.hibernate_sequence")]
    public partial class HibernateSequence
    {
        #pragma warning disable 0649

        private long? _NextVal;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnNextValChanging(long? value);
        partial void OnNextValChanged();
        #endregion

        public HibernateSequence()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for NextVal in the schema.
        /// </summary>
        [Column(Name = @"next_val", Storage = "_NextVal", DbType = "BIGINT NULL", UpdateCheck = UpdateCheck.Never)]
        public long? NextVal
        {
            get
            {
                return this._NextVal;
            }
            set
            {
                if (this._NextVal != value)
                {
                    this._NextVal = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for FsDbContext.Role in the schema.
    /// </summary>
    [Table(Name = @"fs_db.roles")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Role1;

        private int _RoleId;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRole1Changing(string value);
        partial void OnRole1Changed();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        #endregion

        public Role()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Role1 in the schema.
        /// </summary>
        [Column(Name = @"role", Storage = "_Role1", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Role1
        {
            get
            {
                return this._Role1;
            }
            set
            {
                if (this._Role1 != value)
                {
                    this.OnRole1Changing(value);
                    this.SendPropertyChanging("Role1");
                    this._Role1 = value;
                    this.SendPropertyChanged("Role1");
                    this.OnRole1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"role_id", Storage = "_RoleId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FsDbContext.UserRole in the schema.
    /// </summary>
    [Table(Name = @"fs_db.user_role")]
    public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RoleId;

        private int _UserId;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        #endregion

        public UserRole()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RoleId in the schema.
        /// </summary>
        [Column(Name = @"role_id", Storage = "_RoleId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int RoleId
        {
            get
            {
                return this._RoleId;
            }
            set
            {
                if (this._RoleId != value)
                {
                    this.OnRoleIdChanging(value);
                    this.SendPropertyChanging("RoleId");
                    this._RoleId = value;
                    this.SendPropertyChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FsDbContext.User in the schema.
    /// </summary>
    [Table(Name = @"fs_db.users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private bool? _Active;

        private string _Email;

        private string _LastName;

        private string _Name;

        private string _Password;

        private int _UserId;

        private string _UserName;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnActiveChanging(bool? value);
        partial void OnActiveChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastName in the schema.
        /// </summary>
        [Column(Name = @"last_name", Storage = "_LastName", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging("LastName");
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging("UserId");
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"user_name", Storage = "_UserName", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging("UserName");
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
